{
	"name": "Ingest MMS data",
	"properties": {
		"activities": [
			{
				"name": "Copy data to DL file",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "If Read from table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@pipeline().parameters.ExportQuery",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ConfigTable",
						"type": "DatasetReference",
						"parameters": {
							"SchemaName": {
								"value": "@pipeline().parameters.StageSchemaName",
								"type": "Expression"
							},
							"TableName": {
								"value": "@pipeline().parameters.StageTableName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "CDP_Internal_CSV",
						"type": "DatasetReference",
						"parameters": {
							"ContainerName": {
								"value": "@pipeline().parameters.ExportContainerName",
								"type": "Expression"
							},
							"FilePath": {
								"value": "@pipeline().parameters.ExportFolderName",
								"type": "Expression"
							},
							"FileName": {
								"value": "@pipeline().parameters.ExportFileName",
								"type": "Expression"
							},
							"EscapeChar": {
								"value": "@pipeline().parameters.EscapeChar",
								"type": "Expression"
							},
							"DelimiterChar": {
								"value": "@pipeline().parameters.ExportDelimiterChar",
								"type": "Expression"
							},
							"WithHeader": {
								"value": "@pipeline().parameters.WithHeader",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "If Read from table",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.ReadFromTable",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Get Metadata1",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "CDP_Internal_CSV",
									"type": "DatasetReference",
									"parameters": {
										"ContainerName": "landing",
										"FilePath": {
											"value": "@pipeline().parameters.SourceFolderName",
											"type": "Expression"
										},
										"FileName": {
											"value": "@pipeline().parameters.FileName",
											"type": "Expression"
										},
										"EscapeChar": "\"",
										"DelimiterChar": {
											"value": "@pipeline().parameters.DelimiterChar",
											"type": "Expression"
										},
										"WithHeader": {
											"value": "@pipeline().parameters.WithHeader",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"itemName",
									"itemType",
									"lastModified"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "Copy data to internal table",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Get Metadata1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "@{concat('truncate table ',\npipeline().parameters.StageSchemaName,\n'.',\npipeline().parameters.StageTableName)}",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "CDP_Internal_CSV",
									"type": "DatasetReference",
									"parameters": {
										"ContainerName": "landing",
										"FilePath": {
											"value": "@pipeline().parameters.SourceFolderName",
											"type": "Expression"
										},
										"FileName": {
											"value": "@pipeline().parameters.FileName",
											"type": "Expression"
										},
										"EscapeChar": {
											"value": "@pipeline().parameters.EscapeChar",
											"type": "Expression"
										},
										"DelimiterChar": {
											"value": "@pipeline().parameters.DelimiterChar",
											"type": "Expression"
										},
										"WithHeader": {
											"value": "@pipeline().parameters.WithHeader",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ConfigTable",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.StageSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.StageTableName",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set variable start time",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "StartTime",
								"value": {
									"value": "@utcNow()",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set variable CopyDataQuery",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set variable start time",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "CopyDataQuery",
								"value": {
									"value": "@concat('select *    \nfrom openquery(',\npipeline().parameters.SourceDatabaseName,\n',''select * FROM ',\n pipeline().parameters.SourceSchemaName,\n '.',\n pipeline().parameters.SourceTableName,\n if(pipeline().parameters.IsIncrementalLoad,\n    concat('\n    where ',\n    pipeline().parameters.WaterMarkColumn,'>',\n    string(pipeline().parameters.WaterMarkValue),'\n\torder by ',\n    pipeline().parameters.WaterMarkColumn),\n    ''),\n '\n    fetch first ',\nstring(pipeline().parameters.MaxLoadRecordCounts),\n    ' rows only',\n'    \n    with ur'')\n ')\n ",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set variable DestFileName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set variable start time",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "DestFileName",
								"value": {
									"value": "@pipeline().parameters.ExportFileName",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Copy MMS data to landing zone",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set variable CopyDataQuery",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set variable DestFileName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@variables('CopyDataQuery')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "@{concat('truncate table ',\npipeline().parameters.StageSchemaName,\n'.',\npipeline().parameters.StageTableName)}",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "BIDW_Table",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.SourceSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.SourceTableName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ConfigTable",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.StageSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.StageTableName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set variable Rows copied",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Copy MMS data to landing zone",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "NumberOfRecords",
								"value": {
									"value": "@activity('Copy MMS data to landing zone').output.rowsCopied",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If archive data",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Copy data to DL file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.ArchiveData",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "archive data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"additionalColumns": [
										{
											"name": "LoadedDateTime",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										}
									],
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ConfigTable",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.StageSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.StageTableName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ConfigTable",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.StageSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@concat(pipeline().parameters.StageTableName,\n'_Archive')",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "If incremental load",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If archive data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.IsIncrementalLoad",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Read New Watermark value",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat('select isnull(max(',\npipeline().parameters.WaterMarkColumn,\n'),-1) as NewWaterMarkValue from ',\npipeline().parameters.StageSchemaName,\n'.',\npipeline().parameters.StageTableName)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ConfigTable",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.StageSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.StageTableName",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Set variable New Watermark Value",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Read New Watermark value",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "NewWaterMarkValue",
								"value": {
									"value": "@if(equals(activity('Read New Watermark value').output.firstRow.NewWaterMarkValue,-1)\n,pipeline().parameters.WaterMarkValue\n,activity('Read New Watermark value').output.firstRow.NewWaterMarkValue)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Update Running Status",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "If incremental load",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_DataCopyMapping_update]",
					"storedProcedureParameters": {
						"DataCopyMappingPK": {
							"value": {
								"value": "@pipeline().parameters.DataCopyMappingPK",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"EndDateTime": {
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"ErrorMsg": {
							"value": {
								"value": "@variables('ErrorMessage')",
								"type": "Expression"
							},
							"type": "String"
						},
						"LastLoadRecords": {
							"value": {
								"value": "@variables('NumberOfRecords')",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"NewWaterMarkId": {
							"value": {
								"value": "@variables('NewWaterMarkValue')",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"StartDateTime": {
							"value": {
								"value": "@variables('StartTime')",
								"type": "Expression"
							},
							"type": "DateTime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasePrivate",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"SourceFolderName": {
				"type": "string"
			},
			"FileName": {
				"type": "string",
				"defaultValue": "MM4R6ITL.CDPBATF.csv"
			},
			"DelimiterChar": {
				"type": "string",
				"defaultValue": "|"
			},
			"ExportFolderName": {
				"type": "string",
				"defaultValue": "MMS/2023/09/11/"
			},
			"ExportFileName": {
				"type": "string",
				"defaultValue": "MM4R6ITL.CDPBATF.csv"
			},
			"ExportDelimiterChar": {
				"type": "string",
				"defaultValue": "|"
			},
			"StageSchemaName": {
				"type": "string",
				"defaultValue": "MMS"
			},
			"StageTableName": {
				"type": "string",
				"defaultValue": "Raw_CDPBATF"
			},
			"WithHeader": {
				"type": "bool",
				"defaultValue": true
			},
			"EscapeChar": {
				"type": "string",
				"defaultValue": "\""
			},
			"ExportQuery": {
				"type": "string",
				"defaultValue": "select top 100 * from MMS.Raw_CDPBATF"
			},
			"ExportContainerName": {
				"type": "string",
				"defaultValue": "raw"
			},
			"DataCopyMappingPK": {
				"type": "int"
			},
			"MaxLoadRecordCounts": {
				"type": "int"
			},
			"AdditionalInfo": {
				"type": "string",
				"defaultValue": "select top 1 * from MMS.Raw_CDPBATF (nolock) order by BAT_DAT desc,BAT_TIM desc"
			},
			"SourceDatabaseName": {
				"type": "string",
				"defaultValue": "mm4r6lib_odbc_qa"
			},
			"SourceSchemaName": {
				"type": "string",
				"defaultValue": "MM4R6LIB"
			},
			"SourceTableName": {
				"type": "string",
				"defaultValue": "CDPBATF"
			},
			"IsIncrementalLoad": {
				"type": "bool",
				"defaultValue": true
			},
			"WaterMarkColumn": {
				"type": "string",
				"defaultValue": "SDOHNO"
			},
			"WaterMarkValue": {
				"type": "string",
				"defaultValue": "0"
			},
			"ReadFromTable": {
				"type": "bool",
				"defaultValue": true
			},
			"ArchiveData": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"variables": {
			"CopyDataQuery": {
				"type": "String"
			},
			"NewWaterMarkValue": {
				"type": "Integer",
				"defaultValue": 0
			},
			"DestFileName": {
				"type": "String"
			},
			"NumberOfRecords": {
				"type": "Integer",
				"defaultValue": 0
			},
			"StartTime": {
				"type": "String"
			},
			"ErrorMessage": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Ingestion/subpipelines"
		},
		"annotations": []
	}
}